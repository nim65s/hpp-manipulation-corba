/// \mainpage Package documentation
/// \anchor hpp_manipulation_corba_documentation
///
/// \par Introduction
///
/// This package implements a Corba server running hpp-manipulation
/// package functions and the corresponding client.
///
/// The corba server part is compiled into library
/// \c libhpp-manipulation-corba.so that implements the following
/// class:
///   \li hpp::manipulation::Server.
/// The corba services provided by the library are described in interface
///   \li hpp::corbaserver::manipulation::Graph.
///   \li hpp::corbaserver::manipulation::Problem.
///   \li hpp::corbaserver::manipulation::Robot.
///
/// The client part is provided through python module
/// \c hpp_manipulation
///
/// An executable called \c hpp-manipulation-server is installed.
/// This executable runs
///   \li the corba server implemented by library
///       \c libhpp-manipulation-corba.so, as well as
///   \li the corba server implemented in \htmlonly<a class="el" href="@HPP_WHOLEBODY_STEP_CORBA_DOXYGENDOCDIR@/index.html">hpp-wholebody-step-corba</a>\endhtmlonly,
///   \li the corba server implemented in \htmlonly<a class="el" href="@HPP_CORBASERVER_DOXYGENDOCDIR@/index.html">hpp-corbaserver</a>\endhtmlonly.
///
/// See these package documentations for details.
///
/// \par How to communicate with the CORBA server
///
/// The easiest way to launch \c hpp-manipulation-server executable is to
/// open a python terminal and type:
///
///     \code
///     from hpp_manipulation import Client as ManipulationClient
///     mcl = ManipulationClient ()
///     \endcode
///
/// Then variable mcl contains a member \c problem that can send
/// requests to the server. For instance
///
///     \code
///     mcl.problem.loadHumanoidModel ("hrp2_14", "freeflyer",
///                                    "hrp2_14_description", "hrp2_14",
///                                    "_capsule", "_capsule")
///     \endcode
///
/// Some python classes are provided that embed corba clients and
/// that forward corba resquest to the server side:
///   \li \link manipulation.robot.Robot Robot\endlink to load and
///       handle a manipulation robot,
///   \li \link manipulation.robot.HumanoidRobot HumanoidRobot\endlink to load
///       and handle a manipulation robot, containing a humanoid robot at first
///       place,
///   \li \link manipulation.problem_solver.ProblemSolver ProblemSolver\endlink
///       to set and solve a manipulation planning problem.
///   \li \link manipulation.constraint_graph.ConstraintGraph ConstraintGraph
///       \endlink to manipulate the graph of constraint.
///   \li \link manipulation.constraint_graph_factory.ConstraintGraphFactory
///       ConstraintGraphFactory\endlink to create a graph of constraints
///   \li \link manipulation.security_margins.SecurityMargins SecurityMargins
///       \endlink to handle different security margins between pairs of objects
///       of robots.
///
/// \par How to embed a server in an application
///
/// Embedding the corba server into an application can be done by linking the
/// application with \c libhpp-manipulation-corba.so in a similar way as
/// hpp-corbaserver corba server. See documentation of classes
/// hpp::corbaServer::Server and hpp::manipulation::Server for details.
